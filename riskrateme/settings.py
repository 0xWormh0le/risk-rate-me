"""
Django settings for riskrateme project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

MODE_TEST = "test"
MODE_DEV = "dev"
MODE_PROD = "prod"

RUN_MODE = os.environ.get("ENV", MODE_DEV)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_t@^xdn$)stp=*&yy)k-(0d%!p+ppcs$azs$9f@^4jilmfzvs5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (RUN_MODE in [MODE_TEST, MODE_DEV])

if RUN_MODE in [MODE_TEST, MODE_DEV]:
    ALLOWED_HOSTS = ['dev.riskrate.me', '165.227.199.40', 'localhost', 'dev.localhost']
else:
    ALLOWED_HOSTS = ['riskrate.me', 'www.riskrate.me', 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django_celery_beat',
    'django_celery_results',
    'widget_tweaks',
    # Third party apps
    'django_countries',
    "django_fsm_log",
    'djstripe',
    'djcelery_email',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'captcha',
    # Riskrate.me apps
    'public',
    'users',
    'dashboard',
    'reports',
    'assessments',
    'download'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'riskrateme.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, "public", "templates"),
            os.path.join(BASE_DIR, "users", "templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'riskrateme.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': os.path.join(BASE_DIR, 'my.cnf'),
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",

    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

SITE_ID = 1
# BinaryEdge API access information
API_BINARYEDGE_KEY = os.environ.get("API_BINARYEDGE_KEY", "f2fb4583-b32e-41d1-9f83-54ce0b10a392")
API_SHODAN_KEY = "pWK0Ezroc6Iuv3vNxlMCcfNBg41WxTO4"
API_CHECKTLS_USER = "ianbland@pm.me"
API_CHECKTLS_PASSWORD = "9$8q95cW07PDx%"

# Neutrino API access information
NETWORK_TIMEOUT = 5.5

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION  = "mandatory"
ACCOUNT_EMAIL_SUBJECT_PREFIX = "Riskrate.me - "
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_FORMS = {
    'signup': 'users.forms.CustomSignupForm',
    'login': 'users.forms.CustomLoginForm'
}
ACCOUNT_ADAPTER = 'users.adapter.RestrictEmailAdapter'
LOGIN_REDIRECT_URL = "dashboard"
ACCOUNT_LOGOUT_REDIRECT_URL = "home"

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

CELERY_CACHE_BACKEND = 'redis://localhost:6379/0'


STRIPE_LIVE_PUBLIC_KEY = os.environ.get("STRIPE_LIVE_PUBLIC_KEY", "")
STRIPE_LIVE_SECRET_KEY = os.environ.get("STRIPE_LIVE_SECRET_KEY", "")
STRIPE_TEST_PUBLIC_KEY = os.environ.get("STRIPE_TEST_PUBLIC_KEY", "pk_test_kEIYCrVwESSOM0dq5a1JfPRq00UimmwXfy")
STRIPE_TEST_SECRET_KEY = os.environ.get("STRIPE_TEST_SECRET_KEY", "sk_test_aE2TX1yvzzLqpoxXQEU11mM7")

EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

if RUN_MODE in [MODE_TEST, MODE_DEV]:
    # Variables for testing and development mode
    EMAIL_HOST = 'host37.registrar-servers.com'
    EMAIL_HOST_USER = 'notifications@mail.riskrate.me'
    EMAIL_HOST_PASSWORD = '8nzf4k)D6t$I'
    EMAIL_PORT = '465'
    DEFAULT_FROM_EMAIL = 'notifications@riskrate.me'

    API_NEUTRINO_USER = os.environ.get("API_NEUTRINO_USER", "unique-user")
    API_NEUTRINO_KEY = os.environ.get("API_NEUTRINO_KEY", "8402rMZ5VaIxWGXkm0Jpmf7QD8SSse2YvxMW6rZ60TCYNw67")
    STRIPE_PUBLIC_KEY = STRIPE_TEST_PUBLIC_KEY
    STRIPE_SECRET_KEY = STRIPE_TEST_SECRET_KEY
    STRIPE_LIVE_MODE = False  # Change to True in production
else:
    # Variables for production mode
    # 1) Create plans using the Stripe dashboard
    # 2) Import Stripe data by running ./utils/stripe.sh
    # 3) Update API keys
    EMAIL_HOST = 'host37.registrar-servers.com'
    EMAIL_HOST_USER = 'notifications@mail.riskrate.me'
    EMAIL_HOST_PASSWORD = '8nzf4k)D6t$I'
    EMAIL_PORT = '465'
    DEFAULT_FROM_EMAIL = 'notifications@riskrate.me'

    API_NEUTRINO_USER = os.environ.get("API_NEUTRINO_USER", "unique-user")
    API_NEUTRINO_KEY = os.environ.get("API_NEUTRINO_KEY", "8402rMZ5VaIxWGXkm0Jpmf7QD8SSse2YvxMW6rZ60TCYNw67")
    STRIPE_PUBLIC_KEY = STRIPE_LIVE_PUBLIC_KEY
    STRIPE_SECRET_KEY = STRIPE_LIVE_SECRET_KEY
    STRIPE_LIVE_MODE = True  # Change to True in production

if DEBUG:
    # EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
else:
    EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'

DJSTRIPE_WEBHOOK_SECRET = "whsec_xxx"  # Get it fr


RECAPTCHA_PUBLIC_KEY = "6LeK6MAUAAAAAOlea5IQV-EOzW7XL75uuUyMFrdW"
RECAPTCHA_PRIVATE_KEY = "6LeK6MAUAAAAAKqGDl_3ODuoU4t3x2eoMUgPeg7r"
